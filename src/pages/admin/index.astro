---
import AdminLayout from "../../layouts/AdminLayout.astro";
import { getStrapiBaseUrl } from "../../utils/strapiClient";

const strapiBaseUrl = getStrapiBaseUrl();
const adminUrl = `${strapiBaseUrl.replace(/\/$/, "")}/admin`;
---
<AdminLayout title="Centro de contenido Strapi">
  <section class="space-y-8 rounded-3xl border border-slate-800/70 bg-slate-950/70 p-8 shadow-xl shadow-slate-950/40">
    <header class="space-y-3">
      <p class="text-xs uppercase tracking-[0.3em] text-slate-500">Integración oficial</p>
      <h2 class="text-2xl font-semibold text-teal-200">Gestiona el contenido desde Strapi</h2>
      <p class="max-w-3xl text-sm text-slate-300">
        Este proyecto ahora consume el contenido directamente del CMS Strapi, siguiendo la guía de
        <a
          href="https://docs.strapi.io/cms/quick-start"
          target="_blank"
          rel="noreferrer"
          class="text-teal-300 underline hover:text-teal-200"
        >
          Quick Start
        </a>.
        Utiliza el panel administrativo oficial para crear colecciones, añadir eventos y actualizar perfiles del equipo.
      </p>
    </header>

    <div class="grid gap-6 lg:grid-cols-[minmax(0,_1fr)_minmax(0,_0.9fr)]">
      <div class="space-y-5">
        <h3 class="text-lg font-semibold text-teal-100">Pasos para iniciar</h3>
        <ol class="space-y-3 text-sm text-slate-200">
          <li class="flex gap-3">
            <span class="mt-1 inline-flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-full bg-teal-500/10 text-xs font-bold text-teal-200">1</span>
            <span>
              Entra al panel de Strapi en
              <a href={adminUrl} class="font-semibold text-teal-300 underline hover:text-teal-200">{adminUrl}</a> y crea la cuenta inicial de administración si aún no existe.
            </span>
          </li>
          <li class="flex gap-3">
            <span class="mt-1 inline-flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-full bg-teal-500/10 text-xs font-bold text-teal-200">2</span>
            <span>
              Define las colecciones <strong>events</strong> y <strong>team-members</strong> con los campos descritos en la guía. El sitio las consumirá mediante la API pública.
            </span>
          </li>
          <li class="flex gap-3">
            <span class="mt-1 inline-flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-full bg-teal-500/10 text-xs font-bold text-teal-200">3</span>
            <span>
              Publica tus contenidos. Durante el build, Astro obtiene los eventos y perfiles utilizando el token de API configurado en el entorno.
            </span>
          </li>
        </ol>
        <p class="rounded-2xl border border-teal-500/30 bg-teal-500/5 p-4 text-xs text-teal-100">
          Recuerda actualizar las variables <code>PUBLIC_STRAPI_URL</code> y <code>STRAPI_API_TOKEN</code> en tu entorno de despliegue. Si la API no responde, el sitio mostrará datos de respaldo.
        </p>
      </div>

      <aside class="space-y-4 rounded-3xl border border-slate-800/60 bg-slate-950/60 p-6">
        <h3 class="text-base font-semibold text-slate-100">Estado de la conexión</h3>
        <p class="text-sm text-slate-400">Comprobamos que el endpoint REST de Strapi esté disponible.</p>
        <div
          id="strapi-status"
          data-base-url={strapiBaseUrl}
          data-status="checking"
          class="flex items-center gap-3 rounded-2xl border border-slate-800 bg-slate-950/90 px-4 py-3 text-sm"
        >
          <span class="inline-flex h-2.5 w-2.5 rounded-full bg-yellow-400 animate-pulse" aria-hidden="true"></span>
          <span class="status-label">Verificando API…</span>
        </div>
        <p class="text-xs text-slate-500">
          Si recibes un error, inicia el servidor de Strapi con <code>npm run develop</code> en la carpeta <code>strapi-backend</code>.
        </p>
      </aside>
    </div>
  </section>

  <script type="module">
    const statusEl = document.querySelector('[data-status]');
    if (statusEl) {
      const label = statusEl.querySelector('.status-label');
      const baseUrl = statusEl.getAttribute('data-base-url');
      const update = (state, message, color) => {
        statusEl.setAttribute('data-status', state);
        if (label) label.textContent = message;
        const indicator = statusEl.querySelector('span');
        if (indicator) {
          indicator.classList.remove('bg-yellow-400', 'bg-rose-500', 'bg-teal-400');
          indicator.classList.add(color);
          indicator.classList.toggle('animate-pulse', state === 'checking');
        }
      };
      if (!baseUrl) {
        update('error', 'No se encontró la URL base de Strapi.', 'bg-rose-500');
      } else {
        fetch(`${baseUrl.replace(/\/$/, '')}/api/events?pagination[pageSize]=1`)
          .then((response) => {
            if (response.ok) {
              update('ok', 'Conexión establecida con la API de Strapi.', 'bg-teal-400');
            } else {
              update('error', `Respuesta inesperada (${response.status}).`, 'bg-rose-500');
            }
          })
          .catch((error) => {
            console.warn('Error al contactar con Strapi', error);
            update('error', 'No fue posible contactar la API de Strapi.', 'bg-rose-500');
          });
      }
    }
  </script>
</AdminLayout>
